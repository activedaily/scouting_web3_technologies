== hash functions
[%hardbreaks]

=== hash function
Takes any size input, produces fixed size output.

=== cryptographic hash function
It's a *_hash function_* with impossibility to find input by output or  _one way_ function.

=== collision
It's a situation when *_hash function_* produces same output for two different inputs.

=== double hashing
It's a mechanism to resolve hash collisions by _hash function_ usage two times.

=== perfect hash function
It's a *_hash function_* without collisions for a specific set of inputs.

=== preimage
It's an alias to input of a *_hash function_*.

=== hash-based message authentication code
It's used to verify message data integrity and authenticity by _secret key_.

Simple *_hash function_* can be constucted as a logical or arithmetical sum of input data blocks (input can be represented as an array of data blocks for example).

More practical *_hash functions_* are _bit mixers_, with property that one bit change in input produces about half bits change in output.

=== merkle tree
It's a binary tree of concatenated (paired) hashes of neigbour data blocks. Whole data can be splited into data blocks. Pair of neighbor blocks hashes is concatenated to produce next level hash, this applies to array of produced hashes untill one hash is left (merkle root). The path from the bottom data block hash to root hash is named as _merle path_.

image::images/merkle-tree.png[float="right",align="center"]

_Merkle path_ can be used to verify that data block is a part of whole data array on right place.


